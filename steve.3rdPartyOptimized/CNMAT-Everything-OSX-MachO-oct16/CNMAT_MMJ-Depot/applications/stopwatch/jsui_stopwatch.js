/*jsui_stopwatch.js by Michael Zbyszynski, 080221Written by Michael Zbyszynski, The Center for New Music and Audio Technologies,University of California, Berkeley.  Copyright (c) 2008, The Regents of the University of California (Regents).  Permission to use, copy, modify, distribute, and distribute modified versionsof this software and its documentation without fee and without a signedlicensing agreement, is hereby granted, provided that the above copyrightnotice, this paragraph and the following two paragraphs appear in all copies,modifications, and distributions.IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISINGOUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HASBEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULARPURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDEDHEREUNDER IS PROVIDED "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDEMAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@NAME: jsui_stopwatchDESCRIPTION: analogue dispaly for stopwatch(javascript UI)AUTHORS: Michael ZbyszynskiCOPYRIGHT_YEARS: 2008SVN_REVISION: $LastChangedRevision: ??? $VERSION 0.1: First release@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/sketch.default2d();var vbrgb = [1.,1.,1., 1.];var vfrgb = [0.2,0.2,0.2,1.];var vfrgb2 = [1.,0.,0.,1.];var vrgb2 = [0.,0.,0.,1.];var vtask = new Task(taskfun);var vdate = new Date();var elapsedTime = 0;// process argumentsif (jsarguments.length>1)	vfrgb[0] = jsarguments[1]/255.;if (jsarguments.length>2)	vfrgb[1] = jsarguments[2]/255.;if (jsarguments.length>3)	vfrgb[2] = jsarguments[3]/255.;if (jsarguments.length>4)	vbrgb[0] = jsarguments[4]/255.;if (jsarguments.length>5)	vbrgb[1] = jsarguments[5]/255.;if (jsarguments.length>6)	vbrgb[2] = jsarguments[6]/255.;if (jsarguments.length>7)	vrgb2[0] = jsarguments[7]/255.;if (jsarguments.length>8)	vrgb2[1] = jsarguments[8]/255.;if (jsarguments.length>9)	vrgb2[2] = jsarguments[9]/255.;vtask.interval = 1000;vtask.repeat();draw();function draw(){	var theta,i,x,y;		with (sketch) {		// erase background		glclearcolor(vbrgb);		glclear();					glenable("line_smooth");		moveto(0,0);				// fill bgcircle		shapeslice(180,1);		glcolor(0.5, 0.5, 0.5, 1.);		circle(0.95);		glcolor(vbrgb);		circle(0.9);		// draw hour marks				for (i=0;i<60;i++) {			theta = i/60*2*Math.PI;			x = Math.cos(theta);			y = Math.sin(theta);			beginstroke("basic2d");			strokeparam("order",1)			strokeparam("slices",2)			strokeparam("color",vrgb2);			if (i%5) {				strokeparam("scale",0.01);				strokepoint(0.85*x,0.85*y);				strokepoint(0.8*x,0.8*y);			} else {				strokeparam("scale",0.05);				strokepoint(0.85*x,0.85*y);				strokepoint(0.7*x,0.7*y);				}							endstroke();		}				//draw_cnmat;		textalign("center","center");		fontsize(8.);		font("Helvetica");		moveto (0., 0.4);		text ("CNMAT"); 				var hour = vdate.getHours();				var second = (elapsedTime/1000)%60;		var minute = (elapsedTime/60000)%60;		var hour = (elapsedTime/3600000)%60;				// hour hand		theta = ((3-hour)/12)*2*Math.PI;		x = Math.cos(theta);		y = Math.sin(theta);		beginstroke("basic2d");		strokeparam("order",1)		strokeparam("slices",2)		strokeparam("color",vfrgb);		strokeparam("scale",0.08);		strokepoint(-0.1*x,-0.1*y);		strokepoint(0.6*x,0.6*y);		endstroke();		// minute hand					theta = ((15-minute)/60)*2*Math.PI;		x = Math.cos(theta);		y = Math.sin(theta);		beginstroke("basic2d");		strokeparam("order",1)		strokeparam("slices",2)		strokeparam("color",vfrgb);		strokeparam("scale",0.06);		strokepoint(-0.1*x,-0.1*y);		strokepoint(0.8*x,0.8*y);		endstroke();		// second hand					theta = ((15-second)/60)*2*Math.PI;		x = Math.cos(theta);		y = Math.sin(theta);		glcolor(vfrgb2);		moveto(0.62*x,0.62*y);		circle(0.05);		beginstroke("basic2d");		strokeparam("order",1)		strokeparam("slices",2)		strokeparam("color",vfrgb2);		strokeparam("scale",0.02);		strokepoint(-0.2*x,-0.2*y);		strokepoint(0.63*x,0.63*y);		endstroke();		glcolor(vrgb2);		moveto(0,0);		circle(0.02);	}}function time(t){ 	elapsedTime = t;}function fsaa(v){	sketch.fsaa = v;	draw();	refresh();}function frgb(r,g,b){	vfrgb[0] = r/255.;	vfrgb[1] = g/255.;	vfrgb[2] = b/255.;	draw();	refresh();}function rgb2(r,g,b){	vrgb2[0] = r/255.;	vrgb2[1] = g/255.;	vrgb2[2] = b/255.;	draw();	refresh();}function brgb(r,g,b){	vbrgb[0] = r/255.;	vbrgb[1] = g/255.;	vbrgb[2] = b/255.;	draw();	refresh();}function taskfun(){	vdate = new Date();	draw();	refresh();}taskfun.local = 1; //privatefunction forcesize(w,h){	if (w!=h) {		h = w;		box.size(w,h);	}}forcesize.local = 1; //privatefunction onresize(w,h){	forcesize(w,h);	draw();	refresh();}onresize.local = 1; //private