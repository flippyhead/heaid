max v2;#N vpatcher 154 206 693 549;#P newex 70 167 30 196617 mtof;#P comment 211 221 276 196617 TO USE: "Open" the gate object by clicking on the toggle object connected to its left inlet. Click on the button to start playing the sequence. Look at the notes get printed in the Max window. When you've had enough music for one sitting \, "close" the gate by clicking again on the toggle object.;#P message 32 85 28 196617 next;#P toggle 32 29 15 0;#P newex 32 51 27 196617 gate;#P newex 51 215 52 196617 print note;#P button 11 53 15 0;#P newex 32 242 32 196617 t b f;#P newex 32 265 32 196617 delay;#P newex 51 193 88 196617 pack 1. 1. 1. 1. s;#P newex 32 142 105 196617 unpack 1. 1. 1. 1. 1. s;#N coll fm-score;#P newobj 32 111 70 196617 coll fm-score;#P comment 211 28 249 196617 This is a simple sequencer for playing notes. It could easily be adapted to the simple-fm instrument.;#P comment 211 60 277 196617 Each line in the coll is a note containing the parameters for the instrument. In this case they might be interpreted as "time to next note" \, note duration \, carrier-pitch \, c/m ratio and modulation index. N.B.: we are now specifying the note as a MIDI note value instead of a frequency!;#P comment 211 129 276 196617 As with yesterday's additive synth example \, the first parameter \, "time to next note" \, is unpacked and put in the delay object in order to trigger the next note in the coll at the correct time. However \, because we're using poly~ we can give notes an independent duration which may be longer than the time to the next note event. Chords may thus be played by using a "time to next note" value of zero!;#P connect 11 0 10 0;#P connect 8 0 12 0;#P connect 10 0 12 0;#P connect 12 0 3 0;#P connect 3 0 4 0;#P connect 4 0 7 0;#P connect 7 0 6 0;#P fasten 6 0 10 1 37 292 149 292 149 37 54 37;#P connect 4 1 5 0;#P connect 5 0 9 0;#P connect 7 1 6 1;#P connect 4 2 14 0;#P connect 14 0 5 1;#P connect 4 3 5 2;#P connect 4 4 5 3;#P connect 4 5 5 4;#P pop;