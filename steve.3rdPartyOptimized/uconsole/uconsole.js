//////////////////////////////////////////////////////////////////////////////// uconsole.js by maximilian marcoll 2005// // an interactive jsui console object for MaxMSP// // if you have questions write to m.marcoll@web.de// // This program is free software; you can redistribute it and/or// modify it under the terms of the GNU General Public License// as published by the Free Software Foundation; either version 2// of the License, or (at your option) any later version.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License// along with this program; if not, write to the Free Software// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.//////////////////////////////////////////////////////////////////////////////inlets = 1;outlets = 1;var bgc = [255,255,255,1];var textColor = [0, 0, 0,1];var FONTSIZE=12;var cursorcolor;var cursorOn = 0;var LINEOFFSET = FONTSIZE + 2;var MAXLINES;var startPositionScreen=[2, FONTSIZE+2];var cons = new Array (100);var active = 0;var PROMPT = "> ";var NEWLINE = "NewLine___";var BACKSPACE = "backspace___";var HISTORYUP = "historyup___";var HISTORYDOWN = "historydown___";var cursorTSK = new Task(cursor, this);cursorTSK.interval = 200;var CURSORSYM = "|";var history = 2;_CR = new Global("_");if(!_CR.uconsole)	_cr();/////////////////////////////////////////////////////////////////////////////init();sketch.default2d();bang();/////////////////////////////////////////////////////////////////////////////function draw (){	with (sketch)	{		glclearcolor(bgc);		glclear();		glcolor(textColor);		fontsize(FONTSIZE);				if (MAXLINES)		{			for(i=0;i<MAXLINES;i++)			{				moveto(screentoworld(cons[i][1]));				text(cons[i][0]);			}		}				if(active)		{			glcolor(cursorcolor);			text(CURSORSYM);		}	}}draw.local = 1;/////////////////////////////////////////////////////////////////////////////function clear(){	init();	bang();	with (sketch)	{		glclearcolor(bgc);		glclear();	}		cons[MAXLINES-1][0] = PROMPT;	bang();}/////////////////////////////////////////////////////////////////////////////function bang(){		draw();	refresh();}bang.local = 1;/////////////////////////////////////////////////////////////////////////////function brgb(){	if(arguments.length==3)	{		bgc[0]=arguments[0]/255;		bgc[1]=arguments[1]/255;		bgc[2]=arguments[2]/255;		bang();	}}/////////////////////////////////////////////////////////////////////////////function frgb(){	if(arguments.length==3)	{		textColor[0]=arguments[0]/255;		textColor[1]=arguments[1]/255;		textColor[2]=arguments[2]/255;		bang();	}}/////////////////////////////////////////////////////////////////////////////function gettext(val){	var string;	string = String(arguments[0]);		for(i=1;i<arguments.length;i++)	{		string+=" ";		string+=String(arguments[i]);	}		cons[MAXLINES-1][0]=string;	NewLine();	cons[MAXLINES-1][0]=PROMPT;	bang();}gettext.local = 1;/////////////////////////////////////////////////////////////////////////////function onresize (){	init();	bang();}onresize.local = 1;/////////////////////////////////////////////////////////////////////////////function init(){	MAXLINES=parseInt(String(sketch.size[1]/(FONTSIZE+LINEOFFSET-9)));		for (i=0;i<MAXLINES; i++)	{		cons[i] = new Array(2); // text-string and position(screen!!)		for(y=0;y<2;y++)		cons[i][y]= new Array(2);	}	for(i=0;i<MAXLINES;i++)	{		cons[i][0]="";		cons[i][1][0] = startPositionScreen[0];		cons[i][1][1] = startPositionScreen[1]+LINEOFFSET*i;		}		cons[MAXLINES-1][0] = PROMPT;}init.local = 1;/////////////////////////////////////////////////////////////////////////////function msg_int(v){	gettext(v);}/////////////////////////////////////////////////////////////////////////////function msg_float(v){		var s = v.toFixed(5);	var i;	gettext(s);}/////////////////////////////////////////////////////////////////////////////function list(){	var string;			string=String(arguments[0]);		for(i=1;i<arguments.length;i++)	{		string+=" ";		string+=String(arguments[i]);	}		cons[MAXLINES-1][0]=string;	NewLine();	cons[MAXLINES-1][0]=PROMPT;	bang();}/////////////////////////////////////////////////////////////////////////////function anything(){	var string;	string = String(messagename);		for(i=0;i<arguments.length;i++)	{		string+=" ";		string+=String(arguments[i]);	}		cons[MAXLINES-1][0]=string;	NewLine();	cons[MAXLINES-1][0]=PROMPT;	bang();}/////////////////////////////////////////////////////////////////////////////function BLUBDIWARZ (){	var string;			if(!active)		return;			if(arguments[0] == NEWLINE)	{		NewLine();		cons[MAXLINES-1][0]=PROMPT;		bang();		outlet(0, cons[MAXLINES-2][0].slice(PROMPT.length));		return;	}		if(arguments[0] == BACKSPACE)	{		if(cons[MAXLINES-1][0].length == PROMPT.length)			return;			cons[MAXLINES-1][0] = cons[MAXLINES-1][0].slice(0, cons[MAXLINES-1][0].length-1);		bang();		return;	}		if(arguments[0] == HISTORYUP)	{		cons[MAXLINES-1][0] = cons[MAXLINES-history][0];		bang();		history++;		return;	}		if(arguments[0] == HISTORYDOWN)	{		history--;				if(history<2)			history = 2;					cons[MAXLINES-1][0] = cons[MAXLINES-history+1][0];		bang();		return;	}		string = String(arguments[0]);	cons[MAXLINES-1][0]+=string;	bang();}/////////////////////////////////////////////////////////////////////////////function NewLine(){	for (i=0;i<MAXLINES-1;i++)		cons[i][0]=cons[i+1][0];		history = 2;}NewLine.local = 1;/////////////////////////////////////////////////////////////////////////////function onclick(){	active = (active == 0);	if(active)		cursorTSK.repeat();	else	{		cursorTSK.cancel();		bang();	}}onclick.local = 1;/////////////////////////////////////////////////////////////////////////////function cursor(){	cursorOn = (cursorOn == 0);		if(cursorOn)		cursorcolor = textColor;	else		cursorcolor = bgc;	bang();}cursor.local = 1;/////////////////////////////////////////////////////////////////////////////function prompt(){	if(arguments.length)	{		PROMPT = arguments[0];		cons[MAXLINES-1][0] = PROMPT;		bang();	}}/////////////////////////////////////////////////////////////////////////////function term___(){	var a = new Array();		var o=0;		for(i=0;i<arguments.length;i++) {		if(arguments[i] == 8) {			i++;			o += 2;		}		else			a[i-o] = arguments[i];	}		var s = new String();		for(i=0;i<a.length;i++)		s += String.fromCharCode(a[i]);		cons[MAXLINES-1][0]=s;	NewLine();	cons[MAXLINES-1][0]=PROMPT;	bang();}/////////////////////////////////////////////////////////////////////////////function _cr(){	post("uconsole.js by m.marcoll 2005");	post();	_CR.uconsole = 1;}_cr.local = 1;