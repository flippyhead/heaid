/*3d dialarguments: fgred fggreen fgblue bgred bggreen bgblue dialred dialgreen dialblue mode*/sketch.ortho3d(); //like default3d but uses orthographic projectionvar val = 0;var vbrgb = [1.,1.,1.];var vfrgb = [0.9,0.1,0.1];var vfrgbl = [0.2,0.8,0.2];var vrgb2 = [0.7,0.7,0.7];var vfactor = 1.var last_x = 0;var last_y = 0;var vrange = 0.5;var outval = 0;// process argumentsif (jsarguments.length>1)	vfactor = jsarguments[1];if (jsarguments.length>2)	vfrgb[0] = jsarguments[2]/255.;if (jsarguments.length>3)	vfrgb[1] = jsarguments[3]/255.;if (jsarguments.length>4)	vfrgb[2] = jsarguments[4]/255.;if (jsarguments.length>5)	vfrgbl[0] = jsarguments[5]/255.;if (jsarguments.length>6)	vfrgbl[1] = jsarguments[6]/255.;if (jsarguments.length>7)	vfrgbl[2] = jsarguments[7]/255.;if (jsarguments.length>8)	vbrgb[0] = jsarguments[8]/255.;if (jsarguments.length>9)	vbrgb[1] = jsarguments[9]/255.;if (jsarguments.length>10)	vbrgb[2] = jsarguments[10]/255.;if (jsarguments.length>11)	vrgb2[0] = jsarguments[11]/255.;if (jsarguments.length>12)	vrgb2[1] = jsarguments[12]/255.;if (jsarguments.length>13)	vrgb2[2] = jsarguments[13]/255.;draw();function draw(){	var theta;	var width = box.rect[2] - box.rect[0];	with (sketch) {		glenable("depth_test");					shapeslice(64,8);		glcullface("back");				// wireframe off		glpolygonmode("front","fill");					glpolygonmode("back","fill");					// erase background		glclearcolor(vbrgb);		glclear();					// fill bg sphere					glcolor(vrgb2);		moveto(0,0,0);		sphere(0.9,0,360,0,90);								// fill fg arc		glclear("depth");		if (val < 0.) {					glcolor(vfrgbl);			sphere(0.9,90,90-val*360,0,90);			} else {							glcolor(vfrgb);			sphere(0.9,90-val*360,90,0,90);			}							// draw arc outline		gldisable("depth_test");					glenable("line_smooth");					shapeslice(80,1);		glcolor(0,0,0,1);		framecircle(0.9,90-val*360,90);			glcolor(0,0,0,1);		moveto(0,0);		lineto(0,0.9);		moveto(0,0);		theta = (0.25-val)*2*Math.PI;		lineto(0.9*Math.cos(theta),0.9*Math.sin(theta));			}}function bang(){	draw();	refresh();	if (vfactor == 127) 		outval = val*vfactor+63.5;	else		outval = val*2.*vfactor;	outlet(0,outval)}function range(v){	vrange = v * 0.5;}function msg_float(v){	val = Math.min(Math.max(-1*vrange,v*0.5),vrange);	notifyclients();	bang();}function msg_int(v){	if (v < 64) msg_float((v - 63.)/63.)	else msg_float((v - 64.)/63.);}function set(v){	val = Math.min(Math.max(-1*vrange,v*0.5),vrange);	draw();	refresh();}function scale(v){	vfactor = v;}function fsaa(v){	sketch.fsaa = v;	bang();}function frgb(r,g,b){	vfrgb[0] = r/255.;	vfrgb[1] = g/255.;	vfrgb[2] = b/255.;	draw();	refresh();}function frgbl(r,g,b){	vfrgbl[0] = r/255.;	vfrgbl [1] = g/255.;	vfrgbl [2] = b/255.;	draw();	refresh();}function brgb(r,g,b){	vbrgb[0] = r/255.;	vbrgb[1] = g/255.;	vbrgb[2] = b/255.;	draw();	refresh();}function rgb2(r,g,b){	vrgb2[0] = r/255.;	vrgb2[1] = g/255.;	vrgb2[2] = b/255.;	draw();	refresh();}function setvalueof(v){	msg_float(v);}function getvalueof(){	bang()	return outval;}function onresize(w,h){	draw();	refresh();}onresize.local = 1; //privatefunction onclick(x,y,but,cmd,shift,capslock,option,ctrl){	// cache mouse position for tracking delta movements	last_x = x;	last_y = y;}onclick.local = 1; //private. could be left public to permit "synthetic" eventsfunction ondrag(x,y,but,cmd,shift,capslock,option,ctrl){	var f,dy;		// calculate delta movements	dy = y - last_y;	if (shift) { 		// fine tune if shift key is down		f = val - dy*0.001; 	} else {		f = val - dy*0.01;	}	msg_float(f*2.); //set new value with clipping + refresh	// cache mouse position for tracking delta movements	last_x = x;	last_y = y;}ondrag.local = 1; //private. could be left public to permit "synthetic" events